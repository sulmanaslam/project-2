Insertion (with Balancing)
    def insert(self, data):
        self.root = self._insert_recursive(self.root, data)
        return self.root

    def _insert_recursive(self, node, data):
        if node is None:
            return Node(data)

        elif data < node.data:
            node.left = self._insert_recursive(node.left, data)
        elif data > node.data:
            node.right = self._insert_recursive(node.right, data)
        else:  # Equal keys are not allowed in AVL trees
            return node

        # Update height after insertion
        node.height = max(self.get_height(node.left), self.get_height(node.right)) + 1

        # Get the balance factor of the current node
        balance = self.get_balance(node)

        # Handle imbalanced cases:
        # Left Left Case
        if balance > 1 and
